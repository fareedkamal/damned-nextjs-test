query GetProductsCount($where: RootQueryToProductUnionConnectionWhereArgs) {
  products(first: 1, where: $where) {
    found
  }
}

query GetCollectionStats(
  $taxonomies: [CollectionStatsQueryInput]
  $where: CollectionStatsWhereArgs
) {
  collectionStats(
    calculatePriceRange: true
    calculateRatingCounts: true
    calculateStockStatusCounts: true
    taxonomies: $taxonomies
    where: $where
  ) {
    priceRange {
      maxPrice(format: RAW)
      minPrice(format: RAW)
    }
    attributeCounts {
      name
      slug
      label
      terms {
        node {
          id
          name
          slug
        }
        termId
        count
      }
    }
  }
}

query GetProducts(
  $first: Int
  $last: Int
  $after: String
  $before: String
  $where: RootQueryToProductUnionConnectionWhereArgs
) {
  products(
    first: $first
    last: $last
    after: $after
    before: $before
    where: $where
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    edges {
      cursor
      node {
        ...ProductTaxonomies
        ...ProductContentSmall
      }
    }
    nodes {
      ...ProductTaxonomies
      ...ProductContentSmall
    }
  }
}

query GetProduct($id: ID!, $idType: ProductIdTypeEnum) {
  product(id: $id, idType: $idType) {
    ...ProductContentFull
  }
}

query GetProductVariation($id: ID!, $idType: ProductVariationIdTypeEnum) {
  productVariation(id: $id, idType: $idType) {
    ...VariationContent
  }
}

query GetShopCategories(
  $first: Int
  $after: String
  $where: RootQueryToProductCategoryConnectionWhereArgs
) {
  productCategories(first: $first, after: $after, where: $where) {
    pageInfo {
      hasNextPage
      endCursor
    }
    edges {
      node {
        id
        name
        slug
        count
        image {
          sourceUrl
        }
      }
    }
    nodes {
      id
      name
      slug
      count
      image {
        sourceUrl
      }
    }
  }
}

query GetShopTags(
  $first: Int
  $after: String
  $where: RootQueryToProductTagConnectionWhereArgs
) {
  productTags(first: $first, after: $after, where: $where) {
    pageInfo {
      hasNextPage
      endCursor
    }
    edges {
      node {
        id
        name
        slug
      }
    }
    nodes {
      id
      name
      slug
    }
  }
}

query GetSession {
  cart {
    ...CartContent
  }
  customer {
    ...CustomerFields
  }
}

query GetCountries {
  allowedCountries
}

query GetCountryStates($country: CountriesEnum!) {
  countryStates(country: $country) {
    name
    code
  }
}

mutation AddToCart($input: AddToCartInput!) {
  addToCart(input: $input) {
    cart {
      ...CartContent
    }
    cartItem {
      ...CartItemContent
    }
  }
}

mutation UpdateCartItemQuantities($input: UpdateItemQuantitiesInput!) {
  updateItemQuantities(input: $input) {
    cart {
      ...CartContent
    }
    items {
      ...CartItemContent
    }
  }
}

mutation RemoveItemsFromCart($input: RemoveItemsFromCartInput!) {
  removeItemsFromCart(input: $input) {
    cart {
      ...CartContent
    }
    cartItems {
      ...CartItemContent
    }
  }
}

mutation Login($input: LoginInput!) {
  login(input: $input) {
    authToken
    refreshToken
    customer {
      ...CustomerFields
    }
  }
}

mutation RefreshAuthToken($refreshToken: String!) {
  refreshToken: refreshJwtAuthToken(input: { jwtRefreshToken: $refreshToken }) {
    authToken
  }
}

mutation Register($input: RegisterCustomerInput!) {
  registerCustomer(input: $input) {
    customer {
      jwtAuthToken
      jwtRefreshToken
      ...CustomerFields
    }
  }
}

mutation SetDefaultPaymentMethod($tokenId: Int!) {
  setDefaultPaymentMethod(input: { tokenId: $tokenId }) {
    status
    token {
      ...PaymentTokenFields
    }
  }
}

mutation DeletePaymentMethod($tokenId: Int!) {
  deletePaymentMethod(input: { tokenId: $tokenId }) {
    status
  }
}

mutation UpdateCustomer($input: UpdateCustomerInput!) {
  updateCustomer(input: $input) {
    customer {
      ...CustomerFields
    }
  }
}

mutation UpdateSession($input: UpdateSessionInput!) {
  updateSession(input: $input) {
    session {
      id
      key
      value
    }
  }
}

mutation ApplyCoupon($input: ApplyCouponInput!) {
  applyCoupon(input: $input) {
    cart {
      ...CartContent
    }
  }
}

mutation RemoveCoupons($input: RemoveCouponsInput!) {
  removeCoupons(input: $input) {
    cart {
      ...CartContent
    }
  }
}

mutation UpdateShippingMethod($input: UpdateShippingMethodInput!) {
  updateShippingMethod(input: $input) {
    cart {
      ...CartContent
    }
  }
}

mutation EmptyCart($input: EmptyCartInput!) {
  emptyCart(input: $input) {
    cart {
      ...CartContent
    }
  }
}

mutation CreateOrder($input: CreateOrderInput!) {
  createOrder(input: $input) {
    order {
      ...OrderFields
    }
  }
}

query orders(
  $first: Int
  $last: Int
  $after: String
  $before: String
  $where: RootQueryToOrderConnectionWhereArgs
) {
  orders(
    first: $first
    last: $last
    after: $after
    before: $before
    where: $where
  ) {
    nodes {
      ...OrderFields
    }
  }
}
